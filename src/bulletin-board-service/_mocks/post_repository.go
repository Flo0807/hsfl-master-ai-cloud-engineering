// Code generated by MockGen. DO NOT EDIT.
// Source: repository/post_repository.go
//
// Generated by this command:
//
//	mockgen -package=mocks -destination=_mocks/post_repository.go -source=repository/post_repository.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/Flo0807/hsfl-master-ai-cloud-engineering/bulletin-board-service/models"
	gomock "go.uber.org/mock/gomock"
)

// MockPostRepository is a mock of PostRepository interface.
type MockPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryMockRecorder
}

// MockPostRepositoryMockRecorder is the mock recorder for MockPostRepository.
type MockPostRepositoryMockRecorder struct {
	mock *MockPostRepository
}

// NewMockPostRepository creates a new mock instance.
func NewMockPostRepository(ctrl *gomock.Controller) *MockPostRepository {
	mock := &MockPostRepository{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepository) EXPECT() *MockPostRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPostRepository) Create(post *models.Post) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", post)
}

// Create indicates an expected call of Create.
func (mr *MockPostRepositoryMockRecorder) Create(post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostRepository)(nil).Create), post)
}

// Delete mocks base method.
func (m *MockPostRepository) Delete(post *models.Post) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", post)
}

// Delete indicates an expected call of Delete.
func (mr *MockPostRepositoryMockRecorder) Delete(post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPostRepository)(nil).Delete), post)
}

// FindAll mocks base method.
func (m *MockPostRepository) FindAll() []models.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]models.Post)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPostRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPostRepository)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockPostRepository) FindByID(id uint) models.Post {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(models.Post)
	return ret0
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPostRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPostRepository)(nil).FindByID), id)
}

// Update mocks base method.
func (m *MockPostRepository) Update(post *models.Post) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", post)
}

// Update indicates an expected call of Update.
func (mr *MockPostRepositoryMockRecorder) Update(post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPostRepository)(nil).Update), post)
}
